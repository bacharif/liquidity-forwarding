import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export interface AbstractRouterInterface extends utils.Interface {
    functions: {
        "activate(address)": FunctionFragment;
        "admin()": FunctionFragment;
        "bind(address)": FunctionFragment;
        "checkList(address,address)": FunctionFragment;
        "flush(address[],address)": FunctionFragment;
        "makers(address)": FunctionFragment;
        "pull(address,address,uint256,bool)": FunctionFragment;
        "push(address,address,uint256)": FunctionFragment;
        "reserveBalance(address,address)": FunctionFragment;
        "routerGasreq()": FunctionFragment;
        "setAdmin(address)": FunctionFragment;
        "unbind()": FunctionFragment;
        "unbind(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "activate" | "admin" | "bind" | "checkList" | "flush" | "makers" | "pull" | "push" | "reserveBalance" | "routerGasreq" | "setAdmin" | "unbind()" | "unbind(address)"): FunctionFragment;
    encodeFunctionData(functionFragment: "activate", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "bind", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "checkList", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "flush", values: [PromiseOrValue<string>[], PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "makers", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "pull", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "push", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "reserveBalance", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "routerGasreq", values?: undefined): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "unbind()", values?: undefined): string;
    encodeFunctionData(functionFragment: "unbind(address)", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkList", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "makers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reserveBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "routerGasreq", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unbind()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unbind(address)", data: BytesLike): Result;
    events: {
        "SetAdmin(address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
}
export interface SetAdminEventObject {
    admin: string;
}
export declare type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;
export declare type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;
export interface AbstractRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AbstractRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        activate(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        admin(overrides?: CallOverrides): Promise<[string]>;
        bind(maker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        checkList(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;
        flush(tokens: PromiseOrValue<string>[], reserve: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        makers(mkr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        pull(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, strict: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        push(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        reserveBalance(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;
        routerGasreq(overrides?: CallOverrides): Promise<[BigNumber] & {
            overhead: BigNumber;
        }>;
        setAdmin(admin_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "unbind()"(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "unbind(address)"(maker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    activate(token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    admin(overrides?: CallOverrides): Promise<string>;
    bind(maker: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    checkList(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    flush(tokens: PromiseOrValue<string>[], reserve: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    makers(mkr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    pull(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, strict: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    push(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    reserveBalance(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    routerGasreq(overrides?: CallOverrides): Promise<BigNumber>;
    setAdmin(admin_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "unbind()"(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "unbind(address)"(maker: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        activate(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        admin(overrides?: CallOverrides): Promise<string>;
        bind(maker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        checkList(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        flush(tokens: PromiseOrValue<string>[], reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        makers(mkr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        pull(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, strict: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<BigNumber>;
        push(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        reserveBalance(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        routerGasreq(overrides?: CallOverrides): Promise<BigNumber>;
        setAdmin(admin_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        "unbind()"(overrides?: CallOverrides): Promise<void>;
        "unbind(address)"(maker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
        SetAdmin(admin?: null): SetAdminEventFilter;
    };
    estimateGas: {
        activate(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        admin(overrides?: CallOverrides): Promise<BigNumber>;
        bind(maker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        checkList(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        flush(tokens: PromiseOrValue<string>[], reserve: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        makers(mkr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        pull(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, strict: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        push(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        reserveBalance(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        routerGasreq(overrides?: CallOverrides): Promise<BigNumber>;
        setAdmin(admin_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "unbind()"(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "unbind(address)"(maker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        activate(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        bind(maker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        checkList(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        flush(tokens: PromiseOrValue<string>[], reserve: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        makers(mkr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        pull(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, strict: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        push(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        reserveBalance(token: PromiseOrValue<string>, reserve: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        routerGasreq(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setAdmin(admin_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "unbind()"(overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "unbind(address)"(maker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=AbstractRouter.d.ts.map