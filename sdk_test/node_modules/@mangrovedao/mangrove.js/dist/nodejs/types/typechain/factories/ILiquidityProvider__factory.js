"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ILiquidityProvider__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "contract IMangrove",
                name: "mangrove",
                type: "address",
            },
            {
                indexed: true,
                internalType: "contract IERC20",
                name: "outbound_tkn",
                type: "address",
            },
            {
                indexed: true,
                internalType: "contract IERC20",
                name: "inbound_tkn",
                type: "address",
            },
            {
                indexed: true,
                internalType: "uint256",
                name: "offerId",
                type: "uint256",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "makerData",
                type: "bytes32",
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "mgvData",
                type: "bytes32",
            },
        ],
        name: "LogIncident",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "contract AbstractRouter",
                name: "",
                type: "address",
            },
        ],
        name: "SetRouter",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20[]",
                name: "tokens",
                type: "address[]",
            },
        ],
        name: "activate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20",
                name: "token",
                type: "address",
            },
            {
                internalType: "address",
                name: "spender",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20[]",
                name: "tokens",
                type: "address[]",
            },
        ],
        name: "checkList",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20",
                name: "outbound_tkn",
                type: "address",
            },
            {
                internalType: "contract IERC20",
                name: "inbound_tkn",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "gasreq",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "gasprice",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "offerId",
                type: "uint256",
            },
        ],
        name: "getMissingProvision",
        outputs: [
            {
                internalType: "uint256",
                name: "missingProvision",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "outbound_tkn",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "inbound_tkn",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "offerId",
                        type: "uint256",
                    },
                    {
                        internalType: "OfferPacked",
                        name: "offer",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "wants",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gives",
                        type: "uint256",
                    },
                    {
                        internalType: "OfferDetailPacked",
                        name: "offerDetail",
                        type: "uint256",
                    },
                    {
                        internalType: "GlobalPacked",
                        name: "global",
                        type: "uint256",
                    },
                    {
                        internalType: "LocalPacked",
                        name: "local",
                        type: "uint256",
                    },
                ],
                internalType: "struct MgvLib.SingleOrder",
                name: "order",
                type: "tuple",
            },
        ],
        name: "makerExecute",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "outbound_tkn",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "inbound_tkn",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "offerId",
                        type: "uint256",
                    },
                    {
                        internalType: "OfferPacked",
                        name: "offer",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "wants",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gives",
                        type: "uint256",
                    },
                    {
                        internalType: "OfferDetailPacked",
                        name: "offerDetail",
                        type: "uint256",
                    },
                    {
                        internalType: "GlobalPacked",
                        name: "global",
                        type: "uint256",
                    },
                    {
                        internalType: "LocalPacked",
                        name: "local",
                        type: "uint256",
                    },
                ],
                internalType: "struct MgvLib.SingleOrder",
                name: "order",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "makerData",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "mgvData",
                        type: "bytes32",
                    },
                ],
                internalType: "struct MgvLib.OrderResult",
                name: "result",
                type: "tuple",
            },
        ],
        name: "makerPosthook",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20",
                name: "outbound_tkn",
                type: "address",
            },
            {
                internalType: "contract IERC20",
                name: "inbound_tkn",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "wants",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "gives",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "pivotId",
                type: "uint256",
            },
        ],
        name: "newOffer",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [],
        name: "offerGasreq",
        outputs: [
            {
                internalType: "uint256",
                name: "total",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20",
                name: "outbound_tkn",
                type: "address",
            },
            {
                internalType: "contract IERC20",
                name: "inbound_tkn",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "offerId",
                type: "uint256",
            },
        ],
        name: "provisionOf",
        outputs: [
            {
                internalType: "uint256",
                name: "provision",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "maker",
                type: "address",
            },
        ],
        name: "reserve",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20",
                name: "outbound_tkn",
                type: "address",
            },
            {
                internalType: "contract IERC20",
                name: "inbound_tkn",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "offerId",
                type: "uint256",
            },
            {
                internalType: "bool",
                name: "deprovision",
                type: "bool",
            },
        ],
        name: "retractOffer",
        outputs: [
            {
                internalType: "uint256",
                name: "received",
                type: "uint256",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "router",
        outputs: [
            {
                internalType: "contract AbstractRouter",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract AbstractRouter",
                name: "router_",
                type: "address",
            },
        ],
        name: "setRouter",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "contract IERC20",
                name: "outbound_tkn",
                type: "address",
            },
            {
                internalType: "contract IERC20",
                name: "inbound_tkn",
                type: "address",
            },
            {
                internalType: "uint256",
                name: "wants",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "gives",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "pivotId",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "offerId",
                type: "uint256",
            },
        ],
        name: "updateOffer",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
            },
            {
                internalType: "address payable",
                name: "receiver",
                type: "address",
            },
        ],
        name: "withdrawFromMangrove",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class ILiquidityProvider__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ILiquidityProvider__factory = ILiquidityProvider__factory;
ILiquidityProvider__factory.abi = _abi;
//# sourceMappingURL=ILiquidityProvider__factory.js.map