import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "./common";
export declare namespace MgvLib {
    type SingleOrderStruct = {
        outbound_tkn: PromiseOrValue<string>;
        inbound_tkn: PromiseOrValue<string>;
        offerId: PromiseOrValue<BigNumberish>;
        offer: PromiseOrValue<BigNumberish>;
        wants: PromiseOrValue<BigNumberish>;
        gives: PromiseOrValue<BigNumberish>;
        offerDetail: PromiseOrValue<BigNumberish>;
        global: PromiseOrValue<BigNumberish>;
        local: PromiseOrValue<BigNumberish>;
    };
    type SingleOrderStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        outbound_tkn: string;
        inbound_tkn: string;
        offerId: BigNumber;
        offer: BigNumber;
        wants: BigNumber;
        gives: BigNumber;
        offerDetail: BigNumber;
        global: BigNumber;
        local: BigNumber;
    };
}
export interface MgvOracleInterface extends utils.Interface {
    functions: {
        "notifyFail((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address)": FunctionFragment;
        "notifySuccess((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address)": FunctionFragment;
        "read(address,address)": FunctionFragment;
        "setDensity(uint256)": FunctionFragment;
        "setGasPrice(uint256)": FunctionFragment;
        "setMutator(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "notifyFail" | "notifySuccess" | "read" | "setDensity" | "setGasPrice" | "setMutator"): FunctionFragment;
    encodeFunctionData(functionFragment: "notifyFail", values: [MgvLib.SingleOrderStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "notifySuccess", values: [MgvLib.SingleOrderStruct, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "read", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "setDensity", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setGasPrice", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setMutator", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "notifyFail", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "notifySuccess", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "read", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setDensity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setGasPrice", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMutator", data: BytesLike): Result;
    events: {
        "SetDensity(uint256)": EventFragment;
        "SetGasprice(uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "SetDensity"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SetGasprice"): EventFragment;
}
export interface SetDensityEventObject {
    density: BigNumber;
}
export declare type SetDensityEvent = TypedEvent<[BigNumber], SetDensityEventObject>;
export declare type SetDensityEventFilter = TypedEventFilter<SetDensityEvent>;
export interface SetGaspriceEventObject {
    gasPrice: BigNumber;
}
export declare type SetGaspriceEvent = TypedEvent<[BigNumber], SetGaspriceEventObject>;
export declare type SetGaspriceEventFilter = TypedEventFilter<SetGaspriceEvent>;
export interface MgvOracle extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MgvOracleInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        notifyFail(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        notifySuccess(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        read(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            gasprice: BigNumber;
            density: BigNumber;
        }>;
        setDensity(density: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setGasPrice(gasPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setMutator(mutator_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    notifyFail(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    notifySuccess(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    read(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        gasprice: BigNumber;
        density: BigNumber;
    }>;
    setDensity(density: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setGasPrice(gasPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setMutator(mutator_: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        notifyFail(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        notifySuccess(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        read(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            gasprice: BigNumber;
            density: BigNumber;
        }>;
        setDensity(density: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setGasPrice(gasPrice: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setMutator(mutator_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "SetDensity(uint256)"(density?: null): SetDensityEventFilter;
        SetDensity(density?: null): SetDensityEventFilter;
        "SetGasprice(uint256)"(gasPrice?: null): SetGaspriceEventFilter;
        SetGasprice(gasPrice?: null): SetGaspriceEventFilter;
    };
    estimateGas: {
        notifyFail(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        notifySuccess(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        read(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        setDensity(density: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setGasPrice(gasPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setMutator(mutator_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        notifyFail(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        notifySuccess(sor: MgvLib.SingleOrderStruct, taker: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        read(arg0: PromiseOrValue<string>, arg1: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setDensity(density: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setGasPrice(gasPrice: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setMutator(mutator_: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MgvOracle.d.ts.map