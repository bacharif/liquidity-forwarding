export declare class Deferred<T = void> {
    #private;
    readonly promise: Promise<T>;
    constructor();
    resolve(value: T | PromiseLike<T>): void;
    reject(reason?: any): void;
}
declare type watcher = {
    test: (k: any, v: any) => boolean | Promise<boolean>;
    ok: () => void;
};
export declare class Watcher {
    proxy: any;
    watchers: Set<watcher>;
    constructor(target: any);
    watchFor(test: (k: any, v: any) => boolean | Promise<boolean>): Promise<void>;
}
export {};
//# sourceMappingURL=util.d.ts.map