import Big from "big.js";
import * as ethers from "ethers";
import Mangrove from "./mangrove";
import { Bigish } from "./types";
import * as typechain from "./types/typechain";
declare namespace MgvToken {
    type ConstructorOptions = {
        address?: string;
        decimals?: number;
        displayedDecimals?: number;
    };
}
export declare type ApproveArgs = Bigish | ethers.Overrides | {
    amount: Bigish;
    overrides: ethers.Overrides;
};
declare class MgvToken {
    mgv: Mangrove;
    name: string;
    address: string;
    displayedDecimals: number;
    decimals: number;
    contract: typechain.TestToken;
    constructor(name: string, mgv: Mangrove, options: MgvToken.ConstructorOptions);
    /**
     * Convert base/quote from internal amount to public amount.
     * Uses each token's `decimals` parameter.
     *
     * @example
     * ```
     * const usdc = mgv.token("USDC");
     * token.fromUnits("1e7") // 10
     * const dai = mgv.token("DAI")
     * market.fromUnits("1e18") // 1
     * ```
     */
    fromUnits(amount: string | number | ethers.BigNumber): Big;
    /**
     * Convert base/quote from public amount to internal contract amount.
     * Uses each token's `decimals` parameter.
     *
     * If `bq` is `"base"`, will convert the base, the quote otherwise.
     *
     * @example
     * ```
     * const usdc = mgv.token("USDC");
     * token.toUnits(10) // 10e7 as ethers.BigNumber
     * const dai = mgv.token("DAI")
     * market.toUnits(1) // 1e18 as ethers.BigNumber
     * ```
     */
    toUnits(amount: Bigish): ethers.BigNumber;
    /**
     * Convert human-readable amounts to a string with the given
     * number of decimal places. Defaults to the token's decimals places.
     *
     * @example
     * ```
     * token.toFixed("10.123"); // "10.12"
     * token.toFixed(token.fromUnits("1e7"));
     * ```
     */
    toFixed(amount: Bigish, decimals?: number): string;
    /**
     * Return allowance of `owner` given to `spender`.
     * If `owner` is not specified, defaults to current signer.
     * If `spender` is not specified, defaults to Mangrove instance.
     */
    allowance(params?: {
        owner?: string;
        spender?: string;
    }): Promise<Big>;
    /**
     * Read decimals for `tokenName` on given network.
     * To read decimals directly onchain, use `fetchDecimals`.
     */
    static getDecimals(tokenName: string): number;
    /**
     * Set decimals for `tokenName` on current network.
     */
    static setDecimals(tokenName: string, dec: number): void;
    /**
     * Set approval for Mangrove on `amount`.
     */
    approveMangrove(arg?: ApproveArgs): Promise<ethers.ContractTransaction>;
    /**
     * Set approval for `spender` on `amount`.
     */
    approve(spender: string, arg?: ApproveArgs): Promise<ethers.ContractTransaction>;
    /**
     * Returns the balance of `account`.
     */
    balanceOf(account: string, overrides?: ethers.Overrides): Promise<Big>;
    /**
     * Transfers `value` amount of tokens to address `to`
     */
    transfer(to: string, value: Bigish, overrides?: ethers.Overrides): Promise<ethers.ContractTransaction>;
}
export default MgvToken;
//# sourceMappingURL=mgvtoken.d.ts.map