"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Deferred_resolve, _Deferred_reject;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Watcher = exports.Deferred = void 0;
class Deferred {
    constructor() {
        _Deferred_resolve.set(this, void 0);
        _Deferred_reject.set(this, void 0);
        this.promise = new Promise((resolve, reject) => {
            __classPrivateFieldSet(this, _Deferred_resolve, resolve, "f");
            __classPrivateFieldSet(this, _Deferred_reject, reject, "f");
        });
    }
    resolve(value) {
        __classPrivateFieldGet(this, _Deferred_resolve, "f").call(this, value);
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    reject(reason) {
        __classPrivateFieldGet(this, _Deferred_reject, "f").call(this, reason);
    }
}
exports.Deferred = Deferred;
_Deferred_resolve = new WeakMap(), _Deferred_reject = new WeakMap();
class Watcher {
    constructor(target) {
        this.watchers = new Set();
        this.proxy = new Proxy(target, {
            set: (target, key, value) => {
                target[key] = value;
                for (const packed of this.watchers) {
                    Promise.resolve(packed.test(key, value)).then((result) => {
                        if (result) {
                            this.watchers.delete(packed);
                            packed.ok();
                        }
                    });
                }
                return true;
            },
        });
    }
    watchFor(test) {
        return new Promise((ok) => {
            this.watchers.add({ test, ok });
        });
    }
}
exports.Watcher = Watcher;
//# sourceMappingURL=util.js.map