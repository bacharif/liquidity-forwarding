"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const big_js_1 = __importDefault(require("big.js"));
const ethers = __importStar(require("ethers"));
const mangrove_1 = __importDefault(require("../mangrove"));
class UnitCalculations {
    /** Convert public token amount to internal token representation.
     *
     * if `nameOrDecimals` is a string, it is interpreted as a token name. Otherwise
     * it is the number of decimals.
     *
     *  @example
     *  ```
     *  mgv.toUnits(10,"USDC") // 10e6 as ethers.BigNumber
     *  mgv.toUnits(10,6) // 10e6 as ethers.BigNumber
     *  ```
     */
    static toUnits(amount, nameOrDecimals) {
        let decimals;
        if (typeof nameOrDecimals === "number") {
            decimals = nameOrDecimals;
        }
        else {
            decimals = mangrove_1.default.getDecimals(nameOrDecimals);
        }
        return ethers.BigNumber.from((0, big_js_1.default)(10).pow(decimals).mul(amount).toFixed(0));
    }
    /** Convert internal token amount to public token representation.
     *
     * if `nameOrDecimals` is a string, it is interpreted as a token name. Otherwise
     * it is the number of decimals.
     *
     *  @example
     *  ```
     *  mgv.fromUnits("1e19","DAI") // 10
     *  mgv.fromUnits("1e19",18) // 10
     *  ```
     */
    static fromUnits(amount, nameOrDecimals) {
        let decimals;
        if (typeof nameOrDecimals === "number") {
            decimals = nameOrDecimals;
        }
        else {
            decimals = mangrove_1.default.getDecimals(nameOrDecimals);
        }
        if (amount instanceof ethers.BigNumber) {
            amount = amount.toString();
        }
        return (0, big_js_1.default)(amount).div((0, big_js_1.default)(10).pow(decimals));
    }
}
exports.default = UnitCalculations;
//# sourceMappingURL=unitCalculations.js.map