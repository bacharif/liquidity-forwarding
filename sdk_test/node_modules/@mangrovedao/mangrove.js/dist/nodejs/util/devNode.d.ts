import { ethers } from "ethers";
export declare const callDecimalsOn: (provider: ethers.providers.JsonRpcProvider, addresses: string[]) => Promise<(number | undefined)[]>;
export declare const connectToToyENSContract: (provider: ethers.providers.JsonRpcProvider) => ethers.Contract;
export declare const watchAllToyENSEntries: (provider: ethers.providers.JsonRpcProvider, onSet?: (name: any, address: any, decimals?: number) => void) => Promise<DevNode.fetchedContract[]>;
declare namespace DevNode {
    type fetchedContract = {
        name: string;
        address: string;
        decimals: number;
    };
    type provider = ethers.providers.JsonRpcProvider;
    type info = {
        setCode: string;
    };
}
export declare const devNodeInfos: {
    [key: string]: DevNode.info;
};
declare class DevNode {
    provider: DevNode.provider;
    web3ClientVersion: string;
    multicallAddress: string;
    constructor(provider: any);
    clientVersion(): Promise<string>;
    clientType(): Promise<string>;
    info(): Promise<DevNode.info | undefined>;
    isDevNode(): Promise<boolean>;
    setCode(address: string, newCode: string): Promise<any>;
    hasCode(address: string): Promise<boolean>;
    setCodeIfAbsent(address: string, newCode: string): Promise<any>;
    setToyENSCodeIfAbsent(): Promise<any>;
    setMulticallCodeIfAbsent(): Promise<any>;
    callDecimalsOn(addresses: string[]): Promise<(number | undefined)[]>;
    connectToToyENSContract(): ethers.Contract;
    watchAllToyENSEntries(onSet?: (name: any, address: any, decimals?: number) => void): Promise<DevNode.fetchedContract[]>;
}
export default DevNode;
//# sourceMappingURL=devNode.d.ts.map