import * as ethers from "ethers";
import Market from "../../market";
import Mangrove from "../../mangrove";
import PrettyPrint, { prettyPrintFilter } from "../prettyPrint";
import { LiquidityProvider } from "../..";
import * as typechain from "../../types/typechain";
/** Usage example
  Terminal 1:
  $ npx mgv node
 
  Terminal 2:
  $ ts-node --skipProject
  > import {Mangrove,TestMaker} from './src'
  > const mgv = await Mangrove.connect(); // localhost:8545 by default
  > const tm = await TestMaker.create({mgv,base:"TokenA",quote:"TokenB"});
  > await tm.newOffer({ba:"asks",wants:1,gives:1,shouldRevert:true});
  > // We posted an offer.
  > // * Notice the shouldRevert:true
  > // * The base token must be mintable
  >
  > // We're done. To test that the offer does fail:
  > await tm.market.requestBook() // show the current book
  > const quote = tm.market.quote;
  > await quote.approveMangrove();
  > await quote.contract.mint(await mgv.signer.getAddress(),quote.toUnits(10));
  > // will contain a revert
  > const {result,response} = await tm.market.buy({volume:2,price:1});
*/
declare namespace TestMaker {
    type OfferParams = LiquidityProvider.OfferParams & {
        shouldRevert?: boolean;
        executeData?: string;
        gasreq?: number;
        gasprice?: number;
    };
    type CreateParams = {
        mgv: Mangrove;
        base: string;
        quote: string;
    };
}
declare class TestMaker {
    #private;
    mgv: Mangrove;
    contract: typechain.SimpleTestMaker;
    market: Market;
    prettyP: PrettyPrint;
    constructor(p: {
        mgv: Mangrove;
        market: Market;
        address: string;
    });
    static create(p: TestMaker.CreateParams & Partial<Market.OptionalParams>): Promise<TestMaker>;
    newOffer(p: {
        ba: Market.BA;
    } & TestMaker.OfferParams, overrides?: ethers.Overrides): Promise<{
        id: number;
        pivot: number;
        event: ethers.providers.Log;
    }>;
    /** Post a new ask */
    newAsk(p: TestMaker.OfferParams, overrides?: ethers.Overrides): Promise<{
        id: number;
        event: ethers.providers.Log;
    }>;
    /** Post a new bid */
    newBid(p: TestMaker.OfferParams, overrides?: ethers.Overrides): Promise<{
        id: number;
        event: ethers.providers.Log;
    }>;
    /** List all of the maker's asks in the cache */
    asks(): Market.Offer[];
    /** List all of the maker's bids in the cache */
    bids(): Market.Offer[];
    /** Pretty prints the current state of the asks for the maker */
    consoleAsks(filter?: prettyPrintFilter): void;
    /** Pretty prints the current state of the bids for the maker */
    consoleBids(filter?: prettyPrintFilter): void;
}
export default TestMaker;
//# sourceMappingURL=TestMaker.d.ts.map