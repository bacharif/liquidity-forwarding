import Big from "big.js";
import * as ethers from "ethers";
import { Bigish } from "../types";
declare class UnitCalculations {
    /** Convert public token amount to internal token representation.
     *
     * if `nameOrDecimals` is a string, it is interpreted as a token name. Otherwise
     * it is the number of decimals.
     *
     *  @example
     *  ```
     *  mgv.toUnits(10,"USDC") // 10e6 as ethers.BigNumber
     *  mgv.toUnits(10,6) // 10e6 as ethers.BigNumber
     *  ```
     */
    static toUnits(amount: Bigish, nameOrDecimals: string | number): ethers.BigNumber;
    /** Convert internal token amount to public token representation.
     *
     * if `nameOrDecimals` is a string, it is interpreted as a token name. Otherwise
     * it is the number of decimals.
     *
     *  @example
     *  ```
     *  mgv.fromUnits("1e19","DAI") // 10
     *  mgv.fromUnits("1e19",18) // 10
     *  ```
     */
    static fromUnits(amount: number | string | ethers.BigNumber, nameOrDecimals: string | number): Big;
}
export default UnitCalculations;
//# sourceMappingURL=unitCalculations.d.ts.map