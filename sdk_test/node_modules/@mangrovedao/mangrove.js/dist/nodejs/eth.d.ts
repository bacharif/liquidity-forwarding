/**
 * @file Ethereum
 * @desc These methods facilitate interactions with the Ethereum blockchain.
 */
import { ethers } from "ethers";
import { Provider, Signer } from "./types";
interface JsonWalletOptions {
    path: string;
    password: string;
}
export interface CreateSignerOptions {
    provider?: Provider | string;
    signerIndex?: number;
    privateKey?: string;
    mnemonic?: string;
    path?: string;
    signer?: any;
    jsonWallet?: JsonWalletOptions;
    forceReadOnly?: boolean;
}
export interface ProviderNetwork {
    id?: number;
    name: string;
}
export declare class Mnemonic {
    mnemonic: string;
    iterateOn: "account" | "change" | "index";
    static path(iterator: any, iterateOn: "account" | "change" | "index"): string;
    constructor(mnemonic: string, iterateOn?: "account" | "change" | "index");
    signer(iterator: number): ethers.Wallet;
    address(iterator: number): string;
    key(iterator: number): string;
}
/**
 * This helps the mangrove.js constructor discover which Ethereum network the
 *     developer wants to use.
 *
 * @param {Provider | string} [provider] Optional Ethereum network provider.
 *     Defaults to Ethers.js fallback mainnet provider.
 *
 * @hidden
 *
 * @returns {object} Returns a metadata object containing the Ethereum network
 *     name and ID.
 */
export declare function getProviderNetwork(_provider: Provider): Promise<ProviderNetwork>;
/**
 * Creates an Ethereum network provider object.
 *
 * @param {CreateSignerOptions} options
 *
 * options.provider can be:
 * - a string (url or ethers.js network name)
 * - an EIP-1193 provider object (eg window.ethereum)
 * - empty, if `options.signer` is a signer and `options.signer.provider` is a provider.
 *
 * Signing info can be provided by
 * - `options.signer`, if you want to contruct the Signer yourself
 * - `options.provider`, then you can specify `options.signerIndex` to get the nth account, or
 * - `options.privateKey`, or
 * - `options.mnemonic`, then you can specify the BIP44 derivation path with `options.path`.
 * In addition, you can specify
 * - `options.forceReadOnly:boolean` to connect readonly to mangrove. If you don't specify a signer and the provider does not include a signer, you will connect in readonly mode.
 *
 * IMPORTANT if both provider&signer are ethers objects,
 * - if the signer has its own provider, the provider argument will be ignored
 * - otherwise, the signer will attempt to connect to the provider (so any signer info on the provider will be ignored).
 *
 * Note on intended meaning of signer/provider by ricmoo (ethers.js author
 * Provider - read-only access
 * Signer (without a provider) - write-only access
 * Signer (with a provider) - read/write access
 *
 * When in readonly mode, all write operations will fail and msg.sender will be
 * 0x0000000000000000000000000000000000000001
 *
 * @hidden
 *
 * @returns {object} Returns a valid Ethereum network signer object with an attached provider.
 */
export declare function _createSigner(options?: CreateSignerOptions): Promise<{
    readOnly: boolean;
    signer: Signer;
}>;
export {};
//# sourceMappingURL=eth.d.ts.map