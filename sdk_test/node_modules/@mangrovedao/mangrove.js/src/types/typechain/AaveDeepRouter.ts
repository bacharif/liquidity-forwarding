/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AaveDeepRouterInterface extends utils.Interface {
  functions: {
    "IMPLEMENTATION()": FunctionFragment;
    "INTEREST_RATE_MODE()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "POOL()": FunctionFragment;
    "REFERRAL_CODE()": FunctionFragment;
    "_staticdelegatecall(bytes)": FunctionFragment;
    "activate(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "approveLender(address,uint256)": FunctionFragment;
    "bind(address)": FunctionFragment;
    "borrowed(address,address)": FunctionFragment;
    "checkList(address,address)": FunctionFragment;
    "debtToken(address)": FunctionFragment;
    "flush(address[],address)": FunctionFragment;
    "makers(address)": FunctionFragment;
    "maxGettableUnderlying(address,bool,address)": FunctionFragment;
    "overlying(address)": FunctionFragment;
    "pull(address,address,uint256,bool)": FunctionFragment;
    "push(address,address,uint256)": FunctionFragment;
    "reserveBalance(address,address)": FunctionFragment;
    "routerGasreq()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "unbind()": FunctionFragment;
    "unbind(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IMPLEMENTATION"
      | "INTEREST_RATE_MODE"
      | "ORACLE"
      | "POOL"
      | "REFERRAL_CODE"
      | "_staticdelegatecall"
      | "activate"
      | "admin"
      | "approveLender"
      | "bind"
      | "borrowed"
      | "checkList"
      | "debtToken"
      | "flush"
      | "makers"
      | "maxGettableUnderlying"
      | "overlying"
      | "pull"
      | "push"
      | "reserveBalance"
      | "routerGasreq"
      | "setAdmin"
      | "unbind()"
      | "unbind(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "IMPLEMENTATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_staticdelegatecall",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveLender",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bind",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkList",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "flush",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "makers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGettableUnderlying",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "overlying",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pull",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "push",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "routerGasreq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unbind()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unbind(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_staticdelegatecall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bind", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxGettableUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "overlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pull", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerGasreq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unbind()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unbind(address)",
    data: BytesLike
  ): Result;

  events: {
    "SetAdmin(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
}

export interface SetAdminEventObject {
  admin: string;
}
export type SetAdminEvent = TypedEvent<[string], SetAdminEventObject>;

export type SetAdminEventFilter = TypedEventFilter<SetAdminEvent>;

export interface AaveDeepRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveDeepRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IMPLEMENTATION(overrides?: CallOverrides): Promise<[string]>;

    INTEREST_RATE_MODE(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    POOL(overrides?: CallOverrides): Promise<[string]>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<[number]>;

    _staticdelegatecall(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activate(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    approveLender(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bind(
      maker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowed(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkList(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    debtToken(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { debtTkn: string }>;

    flush(
      tokens: PromiseOrValue<string>[],
      reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makers(
      mkr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxGettableUnderlying(
      asset: PromiseOrValue<string>,
      tryBorrow: PromiseOrValue<boolean>,
      onBehalf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxRedeemableUnderlying: BigNumber;
        maxBorrowAfterRedeemInUnderlying: BigNumber;
      }
    >;

    overlying(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { aToken: string }>;

    pull(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      strict: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    push(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reserveBalance(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { available: BigNumber }>;

    routerGasreq(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { overhead: BigNumber }>;

    setAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unbind()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unbind(address)"(
      maker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

  INTEREST_RATE_MODE(overrides?: CallOverrides): Promise<BigNumber>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  POOL(overrides?: CallOverrides): Promise<string>;

  REFERRAL_CODE(overrides?: CallOverrides): Promise<number>;

  _staticdelegatecall(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activate(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  approveLender(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bind(
    maker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowed(
    underlying: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkList(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  debtToken(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  flush(
    tokens: PromiseOrValue<string>[],
    reserve: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makers(
    mkr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxGettableUnderlying(
    asset: PromiseOrValue<string>,
    tryBorrow: PromiseOrValue<boolean>,
    onBehalf: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      maxRedeemableUnderlying: BigNumber;
      maxBorrowAfterRedeemInUnderlying: BigNumber;
    }
  >;

  overlying(
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  pull(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    strict: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  push(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reserveBalance(
    token: PromiseOrValue<string>,
    reserve: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  routerGasreq(overrides?: CallOverrides): Promise<BigNumber>;

  setAdmin(
    admin_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unbind()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unbind(address)"(
    maker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IMPLEMENTATION(overrides?: CallOverrides): Promise<string>;

    INTEREST_RATE_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    POOL(overrides?: CallOverrides): Promise<string>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<number>;

    _staticdelegatecall(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    activate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    approveLender(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bind(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowed(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkList(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    debtToken(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    flush(
      tokens: PromiseOrValue<string>[],
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    makers(
      mkr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxGettableUnderlying(
      asset: PromiseOrValue<string>,
      tryBorrow: PromiseOrValue<boolean>,
      onBehalf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        maxRedeemableUnderlying: BigNumber;
        maxBorrowAfterRedeemInUnderlying: BigNumber;
      }
    >;

    overlying(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pull(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      strict: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    push(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserveBalance(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerGasreq(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "unbind()"(overrides?: CallOverrides): Promise<void>;

    "unbind(address)"(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetAdmin(address)"(admin?: null): SetAdminEventFilter;
    SetAdmin(admin?: null): SetAdminEventFilter;
  };

  estimateGas: {
    IMPLEMENTATION(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    POOL(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<BigNumber>;

    _staticdelegatecall(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activate(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    approveLender(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bind(
      maker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowed(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkList(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToken(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flush(
      tokens: PromiseOrValue<string>[],
      reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makers(
      mkr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxGettableUnderlying(
      asset: PromiseOrValue<string>,
      tryBorrow: PromiseOrValue<boolean>,
      onBehalf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    overlying(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pull(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      strict: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    push(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reserveBalance(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routerGasreq(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unbind()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unbind(address)"(
      maker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IMPLEMENTATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_RATE_MODE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REFERRAL_CODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _staticdelegatecall(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activate(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveLender(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bind(
      maker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowed(
      underlying: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkList(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtToken(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flush(
      tokens: PromiseOrValue<string>[],
      reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makers(
      mkr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxGettableUnderlying(
      asset: PromiseOrValue<string>,
      tryBorrow: PromiseOrValue<boolean>,
      onBehalf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    overlying(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pull(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      strict: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    push(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reserveBalance(
      token: PromiseOrValue<string>,
      reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerGasreq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdmin(
      admin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unbind()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unbind(address)"(
      maker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
