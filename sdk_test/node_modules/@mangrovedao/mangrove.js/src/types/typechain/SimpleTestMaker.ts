/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type OfferDataStruct = {
  shouldRevert: PromiseOrValue<boolean>;
  executeData: PromiseOrValue<string>;
};

export type OfferDataStructOutput = [boolean, string] & {
  shouldRevert: boolean;
  executeData: string;
};

export declare namespace MgvLib {
  export type SingleOrderStruct = {
    outbound_tkn: PromiseOrValue<string>;
    inbound_tkn: PromiseOrValue<string>;
    offerId: PromiseOrValue<BigNumberish>;
    offer: PromiseOrValue<BigNumberish>;
    wants: PromiseOrValue<BigNumberish>;
    gives: PromiseOrValue<BigNumberish>;
    offerDetail: PromiseOrValue<BigNumberish>;
    global: PromiseOrValue<BigNumberish>;
    local: PromiseOrValue<BigNumberish>;
  };

  export type SingleOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    outbound_tkn: string;
    inbound_tkn: string;
    offerId: BigNumber;
    offer: BigNumber;
    wants: BigNumber;
    gives: BigNumber;
    offerDetail: BigNumber;
    global: BigNumber;
    local: BigNumber;
  };

  export type OrderResultStruct = {
    makerData: PromiseOrValue<BytesLike>;
    mgvData: PromiseOrValue<BytesLike>;
  };

  export type OrderResultStructOutput = [string, string] & {
    makerData: string;
    mgvData: string;
  };
}

export interface SimpleTestMakerInterface extends utils.Interface {
  functions: {
    "approveMgv(address,uint256)": FunctionFragment;
    "base()": FunctionFragment;
    "expect(bytes32)": FunctionFragment;
    "logExecute(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "makerExecute((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "makerPosthook((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))": FunctionFragment;
    "mgv()": FunctionFragment;
    "mgvBalance()": FunctionFragment;
    "newOffer(uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "newOffer(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "newOffer(uint256,uint256,uint256,uint256)": FunctionFragment;
    "newOffer(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "provisionMgv(uint256)": FunctionFragment;
    "quote()": FunctionFragment;
    "retractOffer(uint256)": FunctionFragment;
    "retractOfferWithDeprovision(uint256)": FunctionFragment;
    "setShouldFailHook(bool)": FunctionFragment;
    "shouldFail(bool)": FunctionFragment;
    "shouldRepost(bool)": FunctionFragment;
    "shouldRevert(bool)": FunctionFragment;
    "transferToken(address,address,uint256)": FunctionFragment;
    "updateOffer(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))": FunctionFragment;
    "withdrawMgv(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveMgv"
      | "base"
      | "expect"
      | "logExecute"
      | "makerExecute"
      | "makerPosthook"
      | "mgv"
      | "mgvBalance"
      | "newOffer(uint256,uint256,uint256,uint256,(bool,string))"
      | "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))"
      | "newOffer(address,address,uint256,uint256,uint256,uint256)"
      | "newOffer(uint256,uint256,uint256,uint256)"
      | "newOffer(uint256,uint256,uint256,uint256,uint256)"
      | "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))"
      | "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)"
      | "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"
      | "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))"
      | "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"
      | "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"
      | "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)"
      | "provisionMgv"
      | "quote"
      | "retractOffer"
      | "retractOfferWithDeprovision"
      | "setShouldFailHook"
      | "shouldFail"
      | "shouldRepost"
      | "shouldRevert"
      | "transferToken"
      | "updateOffer(uint256,uint256,uint256,uint256,uint256)"
      | "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))"
      | "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"
      | "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"
      | "withdrawMgv"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveMgv",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "expect",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "logExecute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerExecute",
    values: [MgvLib.SingleOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "makerPosthook",
    values: [MgvLib.SingleOrderStruct, MgvLib.OrderResultStruct]
  ): string;
  encodeFunctionData(functionFragment: "mgv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mgvBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer(uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer(address,address,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer(uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provisionMgv",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "quote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retractOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "retractOfferWithDeprovision",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setShouldFailHook",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldFail",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRepost",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldRevert",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffer(uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      OfferDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMgv",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "approveMgv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logExecute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makerExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerPosthook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mgv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mgvBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newOffer(uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOffer(address,address,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOffer(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOffer(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provisionMgv",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retractOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractOfferWithDeprovision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setShouldFailHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shouldFail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldRepost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOffer(uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMgv",
    data: BytesLike
  ): Result;

  events: {
    "Execute(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
}

export interface ExecuteEventObject {
  mgv: string;
  base: string;
  quote: string;
  offerId: BigNumber;
  takerWants: BigNumber;
  takerGives: BigNumber;
}
export type ExecuteEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  ExecuteEventObject
>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export interface SimpleTestMaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SimpleTestMakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveMgv(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    base(overrides?: CallOverrides): Promise<[string]>;

    expect(
      mgvData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    logExecute(
      _mgv: PromiseOrValue<string>,
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mgv(overrides?: CallOverrides): Promise<[string]>;

    mgvBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "newOffer(uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOffer(address,address,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOffer(uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provisionMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quote(overrides?: CallOverrides): Promise<[string]>;

    retractOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retractOfferWithDeprovision(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setShouldFailHook(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldFail(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldRepost(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldRevert(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  approveMgv(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  base(overrides?: CallOverrides): Promise<string>;

  expect(
    mgvData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  logExecute(
    _mgv: PromiseOrValue<string>,
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    offerId: PromiseOrValue<BigNumberish>,
    takerWants: PromiseOrValue<BigNumberish>,
    takerGives: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerExecute(
    order: MgvLib.SingleOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerPosthook(
    order: MgvLib.SingleOrderStruct,
    result: MgvLib.OrderResultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mgv(overrides?: CallOverrides): Promise<string>;

  mgvBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "newOffer(uint256,uint256,uint256,uint256,(bool,string))"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))"(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOffer(address,address,uint256,uint256,uint256,uint256)"(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOffer(uint256,uint256,uint256,uint256)"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOffer(uint256,uint256,uint256,uint256,uint256)"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    gasprice: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    gasprice: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    gasprice: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    gasprice: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)"(
    _base: PromiseOrValue<string>,
    _quote: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provisionMgv(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quote(overrides?: CallOverrides): Promise<string>;

  retractOffer(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retractOfferWithDeprovision(
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setShouldFailHook(
    should: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldFail(
    should: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldRepost(
    should: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldRevert(
    should: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToken(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateOffer(uint256,uint256,uint256,uint256,uint256)"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    gasreq: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    offerData: OfferDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawMgv(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveMgv(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    base(overrides?: CallOverrides): Promise<string>;

    expect(
      mgvData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    logExecute(
      _mgv: PromiseOrValue<string>,
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    mgv(overrides?: CallOverrides): Promise<string>;

    mgvBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "newOffer(uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOffer(address,address,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOffer(uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provisionMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    quote(overrides?: CallOverrides): Promise<string>;

    retractOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retractOfferWithDeprovision(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setShouldFailHook(
      should: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldFail(
      should: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldRepost(
      should: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldRevert(
      should: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Execute(address,address,address,uint256,uint256,uint256)"(
      mgv?: null,
      base?: null,
      quote?: null,
      offerId?: null,
      takerWants?: null,
      takerGives?: null
    ): ExecuteEventFilter;
    Execute(
      mgv?: null,
      base?: null,
      quote?: null,
      offerId?: null,
      takerWants?: null,
      takerGives?: null
    ): ExecuteEventFilter;
  };

  estimateGas: {
    approveMgv(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    expect(
      mgvData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    logExecute(
      _mgv: PromiseOrValue<string>,
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mgv(overrides?: CallOverrides): Promise<BigNumber>;

    mgvBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "newOffer(uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOffer(address,address,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOffer(uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provisionMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    retractOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retractOfferWithDeprovision(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setShouldFailHook(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldFail(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldRepost(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldRevert(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveMgv(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expect(
      mgvData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    logExecute(
      _mgv: PromiseOrValue<string>,
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mgv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mgvBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newOffer(uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOffer(address,address,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOffer(address,address,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOffer(uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newOfferWithFunding(address,address,uint256,uint256,uint256,uint256,uint256)"(
      _base: PromiseOrValue<string>,
      _quote: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provisionMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retractOffer(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retractOfferWithDeprovision(
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setShouldFailHook(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldFail(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldRepost(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldRevert(
      should: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateOffer(uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256)"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "updateOfferWithFunding(uint256,uint256,uint256,uint256,uint256,uint256,(bool,string))"(
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      gasreq: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      offerData: OfferDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawMgv(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
