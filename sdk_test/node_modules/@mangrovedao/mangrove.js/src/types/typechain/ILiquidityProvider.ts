/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MgvLib {
  export type SingleOrderStruct = {
    outbound_tkn: PromiseOrValue<string>;
    inbound_tkn: PromiseOrValue<string>;
    offerId: PromiseOrValue<BigNumberish>;
    offer: PromiseOrValue<BigNumberish>;
    wants: PromiseOrValue<BigNumberish>;
    gives: PromiseOrValue<BigNumberish>;
    offerDetail: PromiseOrValue<BigNumberish>;
    global: PromiseOrValue<BigNumberish>;
    local: PromiseOrValue<BigNumberish>;
  };

  export type SingleOrderStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    outbound_tkn: string;
    inbound_tkn: string;
    offerId: BigNumber;
    offer: BigNumber;
    wants: BigNumber;
    gives: BigNumber;
    offerDetail: BigNumber;
    global: BigNumber;
    local: BigNumber;
  };

  export type OrderResultStruct = {
    makerData: PromiseOrValue<BytesLike>;
    mgvData: PromiseOrValue<BytesLike>;
  };

  export type OrderResultStructOutput = [string, string] & {
    makerData: string;
    mgvData: string;
  };
}

export interface ILiquidityProviderInterface extends utils.Interface {
  functions: {
    "activate(address[])": FunctionFragment;
    "approve(address,address,uint256)": FunctionFragment;
    "checkList(address[])": FunctionFragment;
    "getMissingProvision(address,address,uint256,uint256,uint256)": FunctionFragment;
    "makerExecute((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "makerPosthook((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bytes32,bytes32))": FunctionFragment;
    "newOffer(address,address,uint256,uint256,uint256)": FunctionFragment;
    "offerGasreq()": FunctionFragment;
    "provisionOf(address,address,uint256)": FunctionFragment;
    "reserve(address)": FunctionFragment;
    "retractOffer(address,address,uint256,bool)": FunctionFragment;
    "router()": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "updateOffer(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawFromMangrove(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activate"
      | "approve"
      | "checkList"
      | "getMissingProvision"
      | "makerExecute"
      | "makerPosthook"
      | "newOffer"
      | "offerGasreq"
      | "provisionOf"
      | "reserve"
      | "retractOffer"
      | "router"
      | "setRouter"
      | "updateOffer"
      | "withdrawFromMangrove"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkList",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMissingProvision",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerExecute",
    values: [MgvLib.SingleOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "makerPosthook",
    values: [MgvLib.SingleOrderStruct, MgvLib.OrderResultStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "newOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerGasreq",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provisionOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "reserve",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "retractOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromMangrove",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMissingProvision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerPosthook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerGasreq",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provisionOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retractOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromMangrove",
    data: BytesLike
  ): Result;

  events: {
    "LogIncident(address,address,address,uint256,bytes32,bytes32)": EventFragment;
    "SetRouter(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogIncident"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRouter"): EventFragment;
}

export interface LogIncidentEventObject {
  mangrove: string;
  outbound_tkn: string;
  inbound_tkn: string;
  offerId: BigNumber;
  makerData: string;
  mgvData: string;
}
export type LogIncidentEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  LogIncidentEventObject
>;

export type LogIncidentEventFilter = TypedEventFilter<LogIncidentEvent>;

export interface SetRouterEventObject {
  arg0: string;
}
export type SetRouterEvent = TypedEvent<[string], SetRouterEventObject>;

export type SetRouterEventFilter = TypedEventFilter<SetRouterEvent>;

export interface ILiquidityProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activate(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkList(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    getMissingProvision(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { missingProvision: BigNumber }>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    offerGasreq(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    provisionOf(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { provision: BigNumber }>;

    reserve(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    retractOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      deprovision: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setRouter(
      router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromMangrove(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activate(
    tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    token: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkList(
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<void>;

  getMissingProvision(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    gasreq: PromiseOrValue<BigNumberish>,
    gasprice: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makerExecute(
    order: MgvLib.SingleOrderStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerPosthook(
    order: MgvLib.SingleOrderStruct,
    result: MgvLib.OrderResultStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newOffer(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  offerGasreq(overrides?: CallOverrides): Promise<BigNumber>;

  provisionOf(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reserve(
    maker: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  retractOffer(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    offerId: PromiseOrValue<BigNumberish>,
    deprovision: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setRouter(
    router_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOffer(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    wants: PromiseOrValue<BigNumberish>,
    gives: PromiseOrValue<BigNumberish>,
    pivotId: PromiseOrValue<BigNumberish>,
    offerId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromMangrove(
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkList(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getMissingProvision(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    newOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerGasreq(overrides?: CallOverrides): Promise<BigNumber>;

    provisionOf(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserve(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    retractOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      deprovision: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setRouter(
      router_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromMangrove(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogIncident(address,address,address,uint256,bytes32,bytes32)"(
      mangrove?: null,
      outbound_tkn?: PromiseOrValue<string> | null,
      inbound_tkn?: PromiseOrValue<string> | null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      makerData?: null,
      mgvData?: null
    ): LogIncidentEventFilter;
    LogIncident(
      mangrove?: null,
      outbound_tkn?: PromiseOrValue<string> | null,
      inbound_tkn?: PromiseOrValue<string> | null,
      offerId?: PromiseOrValue<BigNumberish> | null,
      makerData?: null,
      mgvData?: null
    ): LogIncidentEventFilter;

    "SetRouter(address)"(arg0?: null): SetRouterEventFilter;
    SetRouter(arg0?: null): SetRouterEventFilter;
  };

  estimateGas: {
    activate(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkList(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMissingProvision(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    offerGasreq(overrides?: CallOverrides): Promise<BigNumber>;

    provisionOf(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserve(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retractOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      deprovision: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setRouter(
      router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromMangrove(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      token: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkList(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMissingProvision(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      gasprice: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerExecute(
      order: MgvLib.SingleOrderStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerPosthook(
      order: MgvLib.SingleOrderStruct,
      result: MgvLib.OrderResultStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    offerGasreq(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provisionOf(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserve(
      maker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retractOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      offerId: PromiseOrValue<BigNumberish>,
      deprovision: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRouter(
      router_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOffer(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      wants: PromiseOrValue<BigNumberish>,
      gives: PromiseOrValue<BigNumberish>,
      pivotId: PromiseOrValue<BigNumberish>,
      offerId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromMangrove(
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
