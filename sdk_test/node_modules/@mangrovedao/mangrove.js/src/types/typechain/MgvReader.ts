/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type GlobalUnpackedStruct = {
  monitor: PromiseOrValue<string>;
  useOracle: PromiseOrValue<boolean>;
  notify: PromiseOrValue<boolean>;
  gasprice: PromiseOrValue<BigNumberish>;
  gasmax: PromiseOrValue<BigNumberish>;
  dead: PromiseOrValue<boolean>;
};

export type GlobalUnpackedStructOutput = [
  string,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  boolean
] & {
  monitor: string;
  useOracle: boolean;
  notify: boolean;
  gasprice: BigNumber;
  gasmax: BigNumber;
  dead: boolean;
};

export type LocalUnpackedStruct = {
  active: PromiseOrValue<boolean>;
  fee: PromiseOrValue<BigNumberish>;
  density: PromiseOrValue<BigNumberish>;
  offer_gasbase: PromiseOrValue<BigNumberish>;
  lock: PromiseOrValue<boolean>;
  best: PromiseOrValue<BigNumberish>;
  last: PromiseOrValue<BigNumberish>;
};

export type LocalUnpackedStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber
] & {
  active: boolean;
  fee: BigNumber;
  density: BigNumber;
  offer_gasbase: BigNumber;
  lock: boolean;
  best: BigNumber;
  last: BigNumber;
};

export type VolumeDataStruct = {
  totalGot: PromiseOrValue<BigNumberish>;
  totalGave: PromiseOrValue<BigNumberish>;
  totalGasreq: PromiseOrValue<BigNumberish>;
};

export type VolumeDataStructOutput = [BigNumber, BigNumber, BigNumber] & {
  totalGot: BigNumber;
  totalGave: BigNumber;
  totalGasreq: BigNumber;
};

export type OfferUnpackedStruct = {
  prev: PromiseOrValue<BigNumberish>;
  next: PromiseOrValue<BigNumberish>;
  wants: PromiseOrValue<BigNumberish>;
  gives: PromiseOrValue<BigNumberish>;
};

export type OfferUnpackedStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & { prev: BigNumber; next: BigNumber; wants: BigNumber; gives: BigNumber };

export type OfferDetailUnpackedStruct = {
  maker: PromiseOrValue<string>;
  gasreq: PromiseOrValue<BigNumberish>;
  offer_gasbase: PromiseOrValue<BigNumberish>;
  gasprice: PromiseOrValue<BigNumberish>;
};

export type OfferDetailUnpackedStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maker: string;
  gasreq: BigNumber;
  offer_gasbase: BigNumber;
  gasprice: BigNumber;
};

export declare namespace MgvReader {
  export type MarketConfigStruct = {
    config01: LocalUnpackedStruct;
    config10: LocalUnpackedStruct;
  };

  export type MarketConfigStructOutput = [
    LocalUnpackedStructOutput,
    LocalUnpackedStructOutput
  ] & {
    config01: LocalUnpackedStructOutput;
    config10: LocalUnpackedStructOutput;
  };
}

export interface MgvReaderInterface extends utils.Interface {
  functions: {
    "getFee(address,address,uint256)": FunctionFragment;
    "getProvision(address,address,uint256)": FunctionFragment;
    "getProvision(address,address,uint256,uint256)": FunctionFragment;
    "global()": FunctionFragment;
    "globalUnpacked()": FunctionFragment;
    "isEmptyOB(address,address)": FunctionFragment;
    "isMarketOpen(address,address)": FunctionFragment;
    "local(address,address)": FunctionFragment;
    "localUnpacked(address,address)": FunctionFragment;
    "marketConfig(address,address)": FunctionFragment;
    "marketOrder(address,address,uint256,uint256,bool,bool)": FunctionFragment;
    "marketOrder(address,address,uint256,uint256,bool)": FunctionFragment;
    "minVolume(address,address,uint256)": FunctionFragment;
    "minusFee(address,address,uint256)": FunctionFragment;
    "numOpenMarkets()": FunctionFragment;
    "offerList(address,address,uint256,uint256)": FunctionFragment;
    "offerListEndPoints(address,address,uint256,uint256)": FunctionFragment;
    "openMarkets(uint256,uint256,bool)": FunctionFragment;
    "openMarkets(bool)": FunctionFragment;
    "openMarkets(uint256,uint256)": FunctionFragment;
    "openMarkets()": FunctionFragment;
    "order(address,address)": FunctionFragment;
    "packedOfferList(address,address,uint256,uint256)": FunctionFragment;
    "updateMarket(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getFee"
      | "getProvision(address,address,uint256)"
      | "getProvision(address,address,uint256,uint256)"
      | "global"
      | "globalUnpacked"
      | "isEmptyOB"
      | "isMarketOpen"
      | "local"
      | "localUnpacked"
      | "marketConfig"
      | "marketOrder(address,address,uint256,uint256,bool,bool)"
      | "marketOrder(address,address,uint256,uint256,bool)"
      | "minVolume"
      | "minusFee"
      | "numOpenMarkets"
      | "offerList"
      | "offerListEndPoints"
      | "openMarkets(uint256,uint256,bool)"
      | "openMarkets(bool)"
      | "openMarkets(uint256,uint256)"
      | "openMarkets()"
      | "order"
      | "packedOfferList"
      | "updateMarket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvision(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvision(address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "global", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "globalUnpacked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isEmptyOB",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketOpen",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "local",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "localUnpacked",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrder(address,address,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrder(address,address,uint256,uint256,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minVolume",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minusFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "numOpenMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerListEndPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openMarkets(uint256,uint256,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openMarkets(bool)",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "openMarkets(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openMarkets()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "order",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "packedOfferList",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProvision(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProvision(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "global", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalUnpacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEmptyOB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMarketOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "local", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localUnpacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrder(address,address,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrder(address,address,uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minVolume", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minusFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numOpenMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offerList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerListEndPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openMarkets(uint256,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openMarkets(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openMarkets(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openMarkets()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "order", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "packedOfferList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarket",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MgvReader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MgvReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getProvision(address,address,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getProvision(address,address,uint256,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      ofr_gasreq: PromiseOrValue<BigNumberish>,
      ofr_gasprice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    global(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalUnpacked(
      overrides?: CallOverrides
    ): Promise<[GlobalUnpackedStructOutput]>;

    isEmptyOB(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMarketOpen(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    local(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    localUnpacked(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LocalUnpackedStructOutput]>;

    marketConfig(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [MgvReader.MarketConfigStructOutput] & {
        config: MgvReader.MarketConfigStructOutput;
      }
    >;

    "marketOrder(address,address,uint256,uint256,bool,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      accumulate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[VolumeDataStructOutput[]]>;

    "marketOrder(address,address,uint256,uint256,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[VolumeDataStructOutput[]]>;

    minVolume(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minusFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numOpenMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    offerList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber[],
        OfferUnpackedStructOutput[],
        OfferDetailUnpackedStructOutput[]
      ]
    >;

    offerListEndPoints(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startId: BigNumber; length: BigNumber }
    >;

    "openMarkets(uint256,uint256,bool)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [[string, string][], MgvReader.MarketConfigStructOutput[]] & {
        markets: [string, string][];
        configs: MgvReader.MarketConfigStructOutput[];
      }
    >;

    "openMarkets(bool)"(
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[[string, string][], MgvReader.MarketConfigStructOutput[]]>;

    "openMarkets(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[string, string][], MgvReader.MarketConfigStructOutput[]] & {
        markets: [string, string][];
        configs: MgvReader.MarketConfigStructOutput[];
      }
    >;

    "openMarkets()"(
      overrides?: CallOverrides
    ): Promise<[[string, string][], MgvReader.MarketConfigStructOutput[]]>;

    order(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    packedOfferList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber[], BigNumber[]]>;

    updateMarket(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getFee(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    outVolume: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProvision(address,address,uint256)"(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    gasreq: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getProvision(address,address,uint256,uint256)"(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    ofr_gasreq: PromiseOrValue<BigNumberish>,
    ofr_gasprice: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  global(overrides?: CallOverrides): Promise<BigNumber>;

  globalUnpacked(
    overrides?: CallOverrides
  ): Promise<GlobalUnpackedStructOutput>;

  isEmptyOB(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMarketOpen(
    tkn0: PromiseOrValue<string>,
    tkn1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  local(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  localUnpacked(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LocalUnpackedStructOutput>;

  marketConfig(
    tkn0: PromiseOrValue<string>,
    tkn1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MgvReader.MarketConfigStructOutput>;

  "marketOrder(address,address,uint256,uint256,bool,bool)"(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    takerWants: PromiseOrValue<BigNumberish>,
    takerGives: PromiseOrValue<BigNumberish>,
    fillWants: PromiseOrValue<boolean>,
    accumulate: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<VolumeDataStructOutput[]>;

  "marketOrder(address,address,uint256,uint256,bool)"(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    takerWants: PromiseOrValue<BigNumberish>,
    takerGives: PromiseOrValue<BigNumberish>,
    fillWants: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<VolumeDataStructOutput[]>;

  minVolume(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    gasreq: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minusFee(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    outVolume: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numOpenMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  offerList(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    fromId: PromiseOrValue<BigNumberish>,
    maxOffers: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber[],
      OfferUnpackedStructOutput[],
      OfferDetailUnpackedStructOutput[]
    ]
  >;

  offerListEndPoints(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    fromId: PromiseOrValue<BigNumberish>,
    maxOffers: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startId: BigNumber; length: BigNumber }
  >;

  "openMarkets(uint256,uint256,bool)"(
    from: PromiseOrValue<BigNumberish>,
    maxLen: PromiseOrValue<BigNumberish>,
    withConfig: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [[string, string][], MgvReader.MarketConfigStructOutput[]] & {
      markets: [string, string][];
      configs: MgvReader.MarketConfigStructOutput[];
    }
  >;

  "openMarkets(bool)"(
    withConfig: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<[[string, string][], MgvReader.MarketConfigStructOutput[]]>;

  "openMarkets(uint256,uint256)"(
    from: PromiseOrValue<BigNumberish>,
    maxLen: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [[string, string][], MgvReader.MarketConfigStructOutput[]] & {
      markets: [string, string][];
      configs: MgvReader.MarketConfigStructOutput[];
    }
  >;

  "openMarkets()"(
    overrides?: CallOverrides
  ): Promise<[[string, string][], MgvReader.MarketConfigStructOutput[]]>;

  order(
    tkn0: PromiseOrValue<string>,
    tkn1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  packedOfferList(
    outbound_tkn: PromiseOrValue<string>,
    inbound_tkn: PromiseOrValue<string>,
    fromId: PromiseOrValue<BigNumberish>,
    maxOffers: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber[], BigNumber[], BigNumber[]]>;

  updateMarket(
    tkn0: PromiseOrValue<string>,
    tkn1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProvision(address,address,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProvision(address,address,uint256,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      ofr_gasreq: PromiseOrValue<BigNumberish>,
      ofr_gasprice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    global(overrides?: CallOverrides): Promise<BigNumber>;

    globalUnpacked(
      overrides?: CallOverrides
    ): Promise<GlobalUnpackedStructOutput>;

    isEmptyOB(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMarketOpen(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    local(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localUnpacked(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LocalUnpackedStructOutput>;

    marketConfig(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MgvReader.MarketConfigStructOutput>;

    "marketOrder(address,address,uint256,uint256,bool,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      accumulate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<VolumeDataStructOutput[]>;

    "marketOrder(address,address,uint256,uint256,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<VolumeDataStructOutput[]>;

    minVolume(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minusFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numOpenMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    offerList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber[],
        OfferUnpackedStructOutput[],
        OfferDetailUnpackedStructOutput[]
      ]
    >;

    offerListEndPoints(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startId: BigNumber; length: BigNumber }
    >;

    "openMarkets(uint256,uint256,bool)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [[string, string][], MgvReader.MarketConfigStructOutput[]] & {
        markets: [string, string][];
        configs: MgvReader.MarketConfigStructOutput[];
      }
    >;

    "openMarkets(bool)"(
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[[string, string][], MgvReader.MarketConfigStructOutput[]]>;

    "openMarkets(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [[string, string][], MgvReader.MarketConfigStructOutput[]] & {
        markets: [string, string][];
        configs: MgvReader.MarketConfigStructOutput[];
      }
    >;

    "openMarkets()"(
      overrides?: CallOverrides
    ): Promise<[[string, string][], MgvReader.MarketConfigStructOutput[]]>;

    order(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    packedOfferList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber[], BigNumber[], BigNumber[]]>;

    updateMarket(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProvision(address,address,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProvision(address,address,uint256,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      ofr_gasreq: PromiseOrValue<BigNumberish>,
      ofr_gasprice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    global(overrides?: CallOverrides): Promise<BigNumber>;

    globalUnpacked(overrides?: CallOverrides): Promise<BigNumber>;

    isEmptyOB(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarketOpen(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    local(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    localUnpacked(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketConfig(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketOrder(address,address,uint256,uint256,bool,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      accumulate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketOrder(address,address,uint256,uint256,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minVolume(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minusFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numOpenMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    offerList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerListEndPoints(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openMarkets(uint256,uint256,bool)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openMarkets(bool)"(
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openMarkets(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;

    order(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    packedOfferList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMarket(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProvision(address,address,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProvision(address,address,uint256,uint256)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      ofr_gasreq: PromiseOrValue<BigNumberish>,
      ofr_gasprice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    global(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    globalUnpacked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEmptyOB(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarketOpen(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    local(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localUnpacked(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketConfig(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketOrder(address,address,uint256,uint256,bool,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      accumulate: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketOrder(address,address,uint256,uint256,bool)"(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      takerWants: PromiseOrValue<BigNumberish>,
      takerGives: PromiseOrValue<BigNumberish>,
      fillWants: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVolume(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      gasreq: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minusFee(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      outVolume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numOpenMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offerList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerListEndPoints(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openMarkets(uint256,uint256,bool)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openMarkets(bool)"(
      withConfig: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openMarkets(uint256,uint256)"(
      from: PromiseOrValue<BigNumberish>,
      maxLen: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    order(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    packedOfferList(
      outbound_tkn: PromiseOrValue<string>,
      inbound_tkn: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      maxOffers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMarket(
      tkn0: PromiseOrValue<string>,
      tkn1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
